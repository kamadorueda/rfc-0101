diff --git a/idioms/nixos/kernel/after-nixpkgs-fmt.nix b/idioms/nixos/kernel/after-alejandra.nix
index 440dd75..ae087c2 100644
--- a/idioms/nixos/kernel/after-nixpkgs-fmt.nix
+++ b/idioms/nixos/kernel/after-alejandra.nix
@@ -1,7 +1,8 @@
-{ config, lib, pkgs, ... }:
-
-with lib;
-
-let
-
+{
+  config,
+  lib,
+  pkgs,
+  ...
+}:
+with lib; let
   inherit (config.boot) kernelPatches;
@@ -10,3 +11,4 @@ let
 
-  kernelModulesConf = pkgs.writeText "nixos.conf"
+  kernelModulesConf =
+    pkgs.writeText "nixos.conf"
     ''
@@ -14,7 +16,3 @@ let
     '';
-
-in
-
-{
-
+in {
   ###### interface
@@ -24,3 +21,3 @@ in
     boot.kernel.features = mkOption {
-      default = { };
+      default = {};
       example = literalExpression "{ debug = true; }";
@@ -38,10 +35,11 @@ in
       default = pkgs.linuxPackages;
-      type = types.unspecified // { merge = mergeEqualOption; };
-      apply = kernelPackages: kernelPackages.extend (self: super: {
-        kernel = super.kernel.override (originalArgs: {
-          inherit randstructSeed;
-          kernelPatches = (originalArgs.kernelPatches or [ ]) ++ kernelPatches;
-          features = lib.recursiveUpdate super.kernel.features features;
+      type = types.unspecified // {merge = mergeEqualOption;};
+      apply = kernelPackages:
+        kernelPackages.extend (self: super: {
+          kernel = super.kernel.override (originalArgs: {
+            inherit randstructSeed;
+            kernelPatches = (originalArgs.kernelPatches or []) ++ kernelPatches;
+            features = lib.recursiveUpdate super.kernel.features features;
+          });
         });
-      });
       # We don't want to evaluate all of linuxPackages for the manual
@@ -66,3 +64,3 @@ in
       type = types.listOf types.attrs;
-      default = [ ];
+      default = [];
       example = literalExpression "[ pkgs.kernelPatches.ubuntu_fan_4_4 ]";
@@ -85,7 +83,8 @@ in
     boot.kernelParams = mkOption {
-      type = types.listOf (types.strMatching ''([^"[:space:]]|"[^"]*")+'' // {
-        name = "kernelParam";
-        description = "string, with spaces inside double quotes";
-      });
-      default = [ ];
+      type = types.listOf (types.strMatching ''([^"[:space:]]|"[^"]*")+''
+        // {
+          name = "kernelParam";
+          description = "string, with spaces inside double quotes";
+        });
+      default = [];
       description = "Parameters added to the kernel command line.";
@@ -117,3 +116,3 @@ in
       type = types.listOf types.package;
-      default = [ ];
+      default = [];
       example = literalExpression "[ config.boot.kernelPackages.nvidia_x11 ]";
@@ -124,3 +123,3 @@ in
       type = types.listOf types.str;
-      default = [ ];
+      default = [];
       description = ''
@@ -136,4 +135,4 @@ in
       type = types.listOf types.str;
-      default = [ ];
-      example = [ "sata_nv" "ext3" ];
+      default = [];
+      example = ["sata_nv" "ext3"];
       description = ''
@@ -157,3 +156,3 @@ in
       type = types.listOf types.str;
-      default = [ ];
+      default = [];
       description = "List of modules that are always loaded by the initrd.";
@@ -174,3 +173,3 @@ in
       internal = true;
-      default = [ ];
+      default = [];
       description = ''
@@ -185,3 +184,3 @@ in
     system.requiredKernelConfig = mkOption {
-      default = [ ];
+      default = [];
       example = literalExpression ''
@@ -207,7 +204,7 @@ in
 
-  config = mkMerge
+  config =
+    mkMerge
     [
       (mkIf config.boot.initrd.enable {
-        boot.initrd.availableKernelModules =
-          optionals config.boot.initrd.includeDefaultModules ([
+        boot.initrd.availableKernelModules = optionals config.boot.initrd.includeDefaultModules ([
             # Note: most of these (especially the SATA/PATA modules)
@@ -250,4 +247,4 @@ in
             "hid_microsoft"
-
-          ] ++ optionals pkgs.stdenv.hostPlatform.isx86 [
+          ]
+          ++ optionals pkgs.stdenv.hostPlatform.isx86 [
             # Misc. x86 keyboard stuff.
@@ -261,7 +258,6 @@ in
 
-        boot.initrd.kernelModules =
-          optionals config.boot.initrd.includeDefaultModules [
-            # For LVM.
-            "dm_mod"
-          ];
+        boot.initrd.kernelModules = optionals config.boot.initrd.includeDefaultModules [
+          # For LVM.
+          "dm_mod"
+        ];
       })
@@ -269,5 +265,5 @@ in
       (mkIf (!config.boot.isContainer) {
-        system.build = { inherit kernel; };
+        system.build = {inherit kernel;};
 
-        system.modulesTree = [ kernel ] ++ config.boot.extraModulePackages;
+        system.modulesTree = [kernel] ++ config.boot.extraModulePackages;
 
@@ -276,4 +272,4 @@ in
         boot.kernelParams =
-          [ "loglevel=${toString config.boot.consoleLogLevel}" ] ++
-          optionals config.boot.vesa [ "vga=0x317" "nomodeset" ];
+          ["loglevel=${toString config.boot.consoleLogLevel}"]
+          ++ optionals config.boot.vesa ["vga=0x317" "nomodeset"];
 
@@ -281,6 +277,6 @@ in
 
-        boot.kernelModules = [ "loop" "atkbd" ];
+        boot.kernelModules = ["loop" "atkbd"];
 
         # The Linux kernel >= 2.6.27 provides firmware.
-        hardware.firmware = [ kernel ];
+        hardware.firmware = [kernel];
 
@@ -288,20 +284,17 @@ in
         # systemd-modules-load.service to load required kernel modules.
-        environment.etc =
-          {
-            "modules-load.d/nixos.conf".source = kernelModulesConf;
-          };
+        environment.etc = {
+          "modules-load.d/nixos.conf".source = kernelModulesConf;
+        };
 
-        systemd.services.systemd-modules-load =
-          {
-            wantedBy = [ "multi-user.target" ];
-            restartTriggers = [ kernelModulesConf ];
-            serviceConfig =
-              {
-                # Ignore failed module loads.  Typically some of the
-                # modules in ‘boot.kernelModules’ are "nice to have but
-                # not required" (e.g. acpi-cpufreq), so we don't want to
-                # barf on those.
-                SuccessExitStatus = "0 1";
-              };
+        systemd.services.systemd-modules-load = {
+          wantedBy = ["multi-user.target"];
+          restartTriggers = [kernelModulesConf];
+          serviceConfig = {
+            # Ignore failed module loads.  Typically some of the
+            # modules in ‘boot.kernelModules’ are "nice to have but
+            # not required" (e.g. acpi-cpufreq), so we don't want to
+            # barf on those.
+            SuccessExitStatus = "0 1";
           };
+        };
 
@@ -348,12 +341,19 @@ in
             (isYes "BINFMT_ELF")
-          ] ++ (optional (randstructSeed != "") (isYes "GCC_PLUGIN_RANDSTRUCT"));
+          ]
+          ++ (optional (randstructSeed != "") (isYes "GCC_PLUGIN_RANDSTRUCT"));
 
         # nixpkgs kernels are assumed to have all required features
-        assertions = if config.boot.kernelPackages.kernel ? features then [ ] else
-        let cfg = config.boot.kernelPackages.kernel.config; in map
-          (attrs:
-            { assertion = attrs.assertion cfg; inherit (attrs) message; }
-          )
-          config.system.requiredKernelConfig;
-
+        assertions =
+          if config.boot.kernelPackages.kernel ? features
+          then []
+          else let
+            cfg = config.boot.kernelPackages.kernel.config;
+          in
+            map (
+              attrs: {
+                assertion = attrs.assertion cfg;
+                inherit (attrs) message;
+              }
+            )
+            config.system.requiredKernelConfig;
       })
