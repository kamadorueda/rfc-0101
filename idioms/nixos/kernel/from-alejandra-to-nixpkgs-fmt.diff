diff --git a/idioms/nixos/kernel/after-alejandra.nix b/idioms/nixos/kernel/after-nixpkgs-fmt.nix
index ae087c2..440dd75 100644
--- a/idioms/nixos/kernel/after-alejandra.nix
+++ b/idioms/nixos/kernel/after-nixpkgs-fmt.nix
@@ -1,8 +1,7 @@
-{
-  config,
-  lib,
-  pkgs,
-  ...
-}:
-with lib; let
+{ config, lib, pkgs, ... }:
+
+with lib;
+
+let
+
   inherit (config.boot) kernelPatches;
@@ -11,4 +10,3 @@ with lib; let
 
-  kernelModulesConf =
-    pkgs.writeText "nixos.conf"
+  kernelModulesConf = pkgs.writeText "nixos.conf"
     ''
@@ -16,3 +14,7 @@ with lib; let
     '';
-in {
+
+in
+
+{
+
   ###### interface
@@ -21,3 +24,3 @@ in {
     boot.kernel.features = mkOption {
-      default = {};
+      default = { };
       example = literalExpression "{ debug = true; }";
@@ -35,11 +38,10 @@ in {
       default = pkgs.linuxPackages;
-      type = types.unspecified // {merge = mergeEqualOption;};
-      apply = kernelPackages:
-        kernelPackages.extend (self: super: {
-          kernel = super.kernel.override (originalArgs: {
-            inherit randstructSeed;
-            kernelPatches = (originalArgs.kernelPatches or []) ++ kernelPatches;
-            features = lib.recursiveUpdate super.kernel.features features;
-          });
+      type = types.unspecified // { merge = mergeEqualOption; };
+      apply = kernelPackages: kernelPackages.extend (self: super: {
+        kernel = super.kernel.override (originalArgs: {
+          inherit randstructSeed;
+          kernelPatches = (originalArgs.kernelPatches or [ ]) ++ kernelPatches;
+          features = lib.recursiveUpdate super.kernel.features features;
         });
+      });
       # We don't want to evaluate all of linuxPackages for the manual
@@ -64,3 +66,3 @@ in {
       type = types.listOf types.attrs;
-      default = [];
+      default = [ ];
       example = literalExpression "[ pkgs.kernelPatches.ubuntu_fan_4_4 ]";
@@ -83,8 +85,7 @@ in {
     boot.kernelParams = mkOption {
-      type = types.listOf (types.strMatching ''([^"[:space:]]|"[^"]*")+''
-        // {
-          name = "kernelParam";
-          description = "string, with spaces inside double quotes";
-        });
-      default = [];
+      type = types.listOf (types.strMatching ''([^"[:space:]]|"[^"]*")+'' // {
+        name = "kernelParam";
+        description = "string, with spaces inside double quotes";
+      });
+      default = [ ];
       description = "Parameters added to the kernel command line.";
@@ -116,3 +117,3 @@ in {
       type = types.listOf types.package;
-      default = [];
+      default = [ ];
       example = literalExpression "[ config.boot.kernelPackages.nvidia_x11 ]";
@@ -123,3 +124,3 @@ in {
       type = types.listOf types.str;
-      default = [];
+      default = [ ];
       description = ''
@@ -135,4 +136,4 @@ in {
       type = types.listOf types.str;
-      default = [];
-      example = ["sata_nv" "ext3"];
+      default = [ ];
+      example = [ "sata_nv" "ext3" ];
       description = ''
@@ -156,3 +157,3 @@ in {
       type = types.listOf types.str;
-      default = [];
+      default = [ ];
       description = "List of modules that are always loaded by the initrd.";
@@ -173,3 +174,3 @@ in {
       internal = true;
-      default = [];
+      default = [ ];
       description = ''
@@ -184,3 +185,3 @@ in {
     system.requiredKernelConfig = mkOption {
-      default = [];
+      default = [ ];
       example = literalExpression ''
@@ -204,7 +207,7 @@ in {
 
-  config =
-    mkMerge
+  config = mkMerge
     [
       (mkIf config.boot.initrd.enable {
-        boot.initrd.availableKernelModules = optionals config.boot.initrd.includeDefaultModules ([
+        boot.initrd.availableKernelModules =
+          optionals config.boot.initrd.includeDefaultModules ([
             # Note: most of these (especially the SATA/PATA modules)
@@ -247,4 +250,4 @@ in {
             "hid_microsoft"
-          ]
-          ++ optionals pkgs.stdenv.hostPlatform.isx86 [
+
+          ] ++ optionals pkgs.stdenv.hostPlatform.isx86 [
             # Misc. x86 keyboard stuff.
@@ -258,6 +261,7 @@ in {
 
-        boot.initrd.kernelModules = optionals config.boot.initrd.includeDefaultModules [
-          # For LVM.
-          "dm_mod"
-        ];
+        boot.initrd.kernelModules =
+          optionals config.boot.initrd.includeDefaultModules [
+            # For LVM.
+            "dm_mod"
+          ];
       })
@@ -265,5 +269,5 @@ in {
       (mkIf (!config.boot.isContainer) {
-        system.build = {inherit kernel;};
+        system.build = { inherit kernel; };
 
-        system.modulesTree = [kernel] ++ config.boot.extraModulePackages;
+        system.modulesTree = [ kernel ] ++ config.boot.extraModulePackages;
 
@@ -272,4 +276,4 @@ in {
         boot.kernelParams =
-          ["loglevel=${toString config.boot.consoleLogLevel}"]
-          ++ optionals config.boot.vesa ["vga=0x317" "nomodeset"];
+          [ "loglevel=${toString config.boot.consoleLogLevel}" ] ++
+          optionals config.boot.vesa [ "vga=0x317" "nomodeset" ];
 
@@ -277,6 +281,6 @@ in {
 
-        boot.kernelModules = ["loop" "atkbd"];
+        boot.kernelModules = [ "loop" "atkbd" ];
 
         # The Linux kernel >= 2.6.27 provides firmware.
-        hardware.firmware = [kernel];
+        hardware.firmware = [ kernel ];
 
@@ -284,17 +288,20 @@ in {
         # systemd-modules-load.service to load required kernel modules.
-        environment.etc = {
-          "modules-load.d/nixos.conf".source = kernelModulesConf;
-        };
+        environment.etc =
+          {
+            "modules-load.d/nixos.conf".source = kernelModulesConf;
+          };
 
-        systemd.services.systemd-modules-load = {
-          wantedBy = ["multi-user.target"];
-          restartTriggers = [kernelModulesConf];
-          serviceConfig = {
-            # Ignore failed module loads.  Typically some of the
-            # modules in ‘boot.kernelModules’ are "nice to have but
-            # not required" (e.g. acpi-cpufreq), so we don't want to
-            # barf on those.
-            SuccessExitStatus = "0 1";
+        systemd.services.systemd-modules-load =
+          {
+            wantedBy = [ "multi-user.target" ];
+            restartTriggers = [ kernelModulesConf ];
+            serviceConfig =
+              {
+                # Ignore failed module loads.  Typically some of the
+                # modules in ‘boot.kernelModules’ are "nice to have but
+                # not required" (e.g. acpi-cpufreq), so we don't want to
+                # barf on those.
+                SuccessExitStatus = "0 1";
+              };
           };
-        };
 
@@ -341,19 +348,12 @@ in {
             (isYes "BINFMT_ELF")
-          ]
-          ++ (optional (randstructSeed != "") (isYes "GCC_PLUGIN_RANDSTRUCT"));
+          ] ++ (optional (randstructSeed != "") (isYes "GCC_PLUGIN_RANDSTRUCT"));
 
         # nixpkgs kernels are assumed to have all required features
-        assertions =
-          if config.boot.kernelPackages.kernel ? features
-          then []
-          else let
-            cfg = config.boot.kernelPackages.kernel.config;
-          in
-            map (
-              attrs: {
-                assertion = attrs.assertion cfg;
-                inherit (attrs) message;
-              }
-            )
-            config.system.requiredKernelConfig;
+        assertions = if config.boot.kernelPackages.kernel ? features then [ ] else
+        let cfg = config.boot.kernelPackages.kernel.config; in map
+          (attrs:
+            { assertion = attrs.assertion cfg; inherit (attrs) message; }
+          )
+          config.system.requiredKernelConfig;
+
       })
