diff --git a/idioms/nixos/kernel/after-alejandra.nix b/idioms/nixos/kernel/after-nixfmt.nix
index ae087c2..fa81fe0 100644
--- a/idioms/nixos/kernel/after-alejandra.nix
+++ b/idioms/nixos/kernel/after-nixfmt.nix
@@ -1,8 +1,7 @@
-{
-  config,
-  lib,
-  pkgs,
-  ...
-}:
-with lib; let
+{ config, lib, pkgs, ... }:
+
+with lib;
+
+let
+
   inherit (config.boot) kernelPatches;
@@ -11,7 +10,6 @@ with lib; let
 
-  kernelModulesConf =
-    pkgs.writeText "nixos.conf"
-    ''
-      ${concatStringsSep "\n" config.boot.kernelModules}
-    '';
+  kernelModulesConf = pkgs.writeText "nixos.conf" ''
+    ${concatStringsSep "\n" config.boot.kernelModules}
+  '';
+
 in {
@@ -21,3 +21,3 @@ in {
     boot.kernel.features = mkOption {
-      default = {};
+      default = { };
       example = literalExpression "{ debug = true; }";
@@ -35,3 +35,3 @@ in {
       default = pkgs.linuxPackages;
-      type = types.unspecified // {merge = mergeEqualOption;};
+      type = types.unspecified // { merge = mergeEqualOption; };
       apply = kernelPackages:
@@ -40,3 +40,4 @@ in {
             inherit randstructSeed;
-            kernelPatches = (originalArgs.kernelPatches or []) ++ kernelPatches;
+            kernelPatches = (originalArgs.kernelPatches or [ ])
+              ++ kernelPatches;
             features = lib.recursiveUpdate super.kernel.features features;
@@ -64,3 +65,3 @@ in {
       type = types.listOf types.attrs;
-      default = [];
+      default = [ ];
       example = literalExpression "[ pkgs.kernelPatches.ubuntu_fan_4_4 ]";
@@ -83,8 +84,7 @@ in {
     boot.kernelParams = mkOption {
-      type = types.listOf (types.strMatching ''([^"[:space:]]|"[^"]*")+''
-        // {
-          name = "kernelParam";
-          description = "string, with spaces inside double quotes";
-        });
-      default = [];
+      type = types.listOf (types.strMatching ''([^"[:space:]]|"[^"]*")+'' // {
+        name = "kernelParam";
+        description = "string, with spaces inside double quotes";
+      });
+      default = [ ];
       description = "Parameters added to the kernel command line.";
@@ -116,3 +116,3 @@ in {
       type = types.listOf types.package;
-      default = [];
+      default = [ ];
       example = literalExpression "[ config.boot.kernelPackages.nvidia_x11 ]";
@@ -123,3 +123,3 @@ in {
       type = types.listOf types.str;
-      default = [];
+      default = [ ];
       description = ''
@@ -135,4 +135,4 @@ in {
       type = types.listOf types.str;
-      default = [];
-      example = ["sata_nv" "ext3"];
+      default = [ ];
+      example = [ "sata_nv" "ext3" ];
       description = ''
@@ -156,3 +156,3 @@ in {
       type = types.listOf types.str;
-      default = [];
+      default = [ ];
       description = "List of modules that are always loaded by the initrd.";
@@ -173,3 +173,3 @@ in {
       internal = true;
-      default = [];
+      default = [ ];
       description = ''
@@ -184,3 +184,3 @@ in {
     system.requiredKernelConfig = mkOption {
-      default = [];
+      default = [ ];
       example = literalExpression ''
@@ -204,57 +205,57 @@ in {
 
-  config =
-    mkMerge
-    [
-      (mkIf config.boot.initrd.enable {
-        boot.initrd.availableKernelModules = optionals config.boot.initrd.includeDefaultModules ([
-            # Note: most of these (especially the SATA/PATA modules)
-            # shouldn't be included by default since nixos-generate-config
-            # detects them, but I'm keeping them for now for backwards
-            # compatibility.
-
-            # Some SATA/PATA stuff.
-            "ahci"
-            "sata_nv"
-            "sata_via"
-            "sata_sis"
-            "sata_uli"
-            "ata_piix"
-            "pata_marvell"
-
-            # Standard SCSI stuff.
-            "sd_mod"
-            "sr_mod"
-
-            # SD cards and internal eMMC drives.
-            "mmc_block"
-
-            # Support USB keyboards, in case the boot fails and we only have
-            # a USB keyboard, or for LUKS passphrase prompt.
-            "uhci_hcd"
-            "ehci_hcd"
-            "ehci_pci"
-            "ohci_hcd"
-            "ohci_pci"
-            "xhci_hcd"
-            "xhci_pci"
-            "usbhid"
-            "hid_generic"
-            "hid_lenovo"
-            "hid_apple"
-            "hid_roccat"
-            "hid_logitech_hidpp"
-            "hid_logitech_dj"
-            "hid_microsoft"
-          ]
-          ++ optionals pkgs.stdenv.hostPlatform.isx86 [
-            # Misc. x86 keyboard stuff.
-            "pcips2"
-            "atkbd"
-            "i8042"
-
-            # x86 RTC needed by the stage 2 init script.
-            "rtc_cmos"
-          ]);
-
-        boot.initrd.kernelModules = optionals config.boot.initrd.includeDefaultModules [
+  config = mkMerge [
+    (mkIf config.boot.initrd.enable {
+      boot.initrd.availableKernelModules =
+        optionals config.boot.initrd.includeDefaultModules ([
+          # Note: most of these (especially the SATA/PATA modules)
+          # shouldn't be included by default since nixos-generate-config
+          # detects them, but I'm keeping them for now for backwards
+          # compatibility.
+
+          # Some SATA/PATA stuff.
+          "ahci"
+          "sata_nv"
+          "sata_via"
+          "sata_sis"
+          "sata_uli"
+          "ata_piix"
+          "pata_marvell"
+
+          # Standard SCSI stuff.
+          "sd_mod"
+          "sr_mod"
+
+          # SD cards and internal eMMC drives.
+          "mmc_block"
+
+          # Support USB keyboards, in case the boot fails and we only have
+          # a USB keyboard, or for LUKS passphrase prompt.
+          "uhci_hcd"
+          "ehci_hcd"
+          "ehci_pci"
+          "ohci_hcd"
+          "ohci_pci"
+          "xhci_hcd"
+          "xhci_pci"
+          "usbhid"
+          "hid_generic"
+          "hid_lenovo"
+          "hid_apple"
+          "hid_roccat"
+          "hid_logitech_hidpp"
+          "hid_logitech_dj"
+          "hid_microsoft"
+
+        ] ++ optionals pkgs.stdenv.hostPlatform.isx86 [
+          # Misc. x86 keyboard stuff.
+          "pcips2"
+          "atkbd"
+          "i8042"
+
+          # x86 RTC needed by the stage 2 init script.
+          "rtc_cmos"
+        ]);
+
+      boot.initrd.kernelModules =
+        optionals config.boot.initrd.includeDefaultModules [
           # For LVM.
@@ -262,100 +263,96 @@ in {
         ];
-      })
+    })
+
+    (mkIf (!config.boot.isContainer) {
+      system.build = { inherit kernel; };
+
+      system.modulesTree = [ kernel ] ++ config.boot.extraModulePackages;
 
-      (mkIf (!config.boot.isContainer) {
-        system.build = {inherit kernel;};
+      # Implement consoleLogLevel both in early boot and using sysctl
+      # (so you don't need to reboot to have changes take effect).
+      boot.kernelParams = [ "loglevel=${toString config.boot.consoleLogLevel}" ]
+        ++ optionals config.boot.vesa [ "vga=0x317" "nomodeset" ];
 
-        system.modulesTree = [kernel] ++ config.boot.extraModulePackages;
+      boot.kernel.sysctl."kernel.printk" =
+        mkDefault config.boot.consoleLogLevel;
 
-        # Implement consoleLogLevel both in early boot and using sysctl
-        # (so you don't need to reboot to have changes take effect).
-        boot.kernelParams =
-          ["loglevel=${toString config.boot.consoleLogLevel}"]
-          ++ optionals config.boot.vesa ["vga=0x317" "nomodeset"];
+      boot.kernelModules = [ "loop" "atkbd" ];
 
-        boot.kernel.sysctl."kernel.printk" = mkDefault config.boot.consoleLogLevel;
+      # The Linux kernel >= 2.6.27 provides firmware.
+      hardware.firmware = [ kernel ];
 
-        boot.kernelModules = ["loop" "atkbd"];
+      # Create /etc/modules-load.d/nixos.conf, which is read by
+      # systemd-modules-load.service to load required kernel modules.
+      environment.etc = {
+        "modules-load.d/nixos.conf".source = kernelModulesConf;
+      };
 
-        # The Linux kernel >= 2.6.27 provides firmware.
-        hardware.firmware = [kernel];
+      systemd.services.systemd-modules-load = {
+        wantedBy = [ "multi-user.target" ];
+        restartTriggers = [ kernelModulesConf ];
+        serviceConfig = { # Ignore failed module loads.  Typically some of the
+          # modules in ‘boot.kernelModules’ are "nice to have but
+          # not required" (e.g. acpi-cpufreq), so we don't want to
+          # barf on those.
+          SuccessExitStatus = "0 1";
+        };
+      };
+
+      lib.kernelConfig = {
+        isYes = option: {
+          assertion = config: config.isYes option;
+          message = "CONFIG_${option} is not yes!";
+          configLine = "CONFIG_${option}=y";
+        };
+
+        isNo = option: {
+          assertion = config: config.isNo option;
+          message = "CONFIG_${option} is not no!";
+          configLine = "CONFIG_${option}=n";
+        };
 
-        # Create /etc/modules-load.d/nixos.conf, which is read by
-        # systemd-modules-load.service to load required kernel modules.
-        environment.etc = {
-          "modules-load.d/nixos.conf".source = kernelModulesConf;
+        isModule = option: {
+          assertion = config: config.isModule option;
+          message = "CONFIG_${option} is not built as a module!";
+          configLine = "CONFIG_${option}=m";
         };
 
-        systemd.services.systemd-modules-load = {
-          wantedBy = ["multi-user.target"];
-          restartTriggers = [kernelModulesConf];
-          serviceConfig = {
-            # Ignore failed module loads.  Typically some of the
-            # modules in ‘boot.kernelModules’ are "nice to have but
-            # not required" (e.g. acpi-cpufreq), so we don't want to
-            # barf on those.
-            SuccessExitStatus = "0 1";
-          };
+        ### Usually you will just want to use these two
+        # True if yes or module
+        isEnabled = option: {
+          assertion = config: config.isEnabled option;
+          message = "CONFIG_${option} is not enabled!";
+          configLine = "CONFIG_${option}=y";
         };
 
-        lib.kernelConfig = {
-          isYes = option: {
-            assertion = config: config.isYes option;
-            message = "CONFIG_${option} is not yes!";
-            configLine = "CONFIG_${option}=y";
-          };
-
-          isNo = option: {
-            assertion = config: config.isNo option;
-            message = "CONFIG_${option} is not no!";
-            configLine = "CONFIG_${option}=n";
-          };
-
-          isModule = option: {
-            assertion = config: config.isModule option;
-            message = "CONFIG_${option} is not built as a module!";
-            configLine = "CONFIG_${option}=m";
-          };
-
-          ### Usually you will just want to use these two
-          # True if yes or module
-          isEnabled = option: {
-            assertion = config: config.isEnabled option;
-            message = "CONFIG_${option} is not enabled!";
-            configLine = "CONFIG_${option}=y";
-          };
-
-          # True if no or omitted
-          isDisabled = option: {
-            assertion = config: config.isDisabled option;
-            message = "CONFIG_${option} is not disabled!";
-            configLine = "CONFIG_${option}=n";
-          };
+        # True if no or omitted
+        isDisabled = option: {
+          assertion = config: config.isDisabled option;
+          message = "CONFIG_${option} is not disabled!";
+          configLine = "CONFIG_${option}=n";
         };
+      };
+
+      # The config options that all modules can depend upon
+      system.requiredKernelConfig = with config.lib.kernelConfig;
+        [
+          # !!! Should this really be needed?
+          (isYes "MODULES")
+          (isYes "BINFMT_ELF")
+        ] ++ (optional (randstructSeed != "") (isYes "GCC_PLUGIN_RANDSTRUCT"));
+
+      # nixpkgs kernels are assumed to have all required features
+      assertions = if config.boot.kernelPackages.kernel ? features then
+        [ ]
+      else
+        let cfg = config.boot.kernelPackages.kernel.config;
+        in map (attrs: {
+          assertion = attrs.assertion cfg;
+          inherit (attrs) message;
+        }) config.system.requiredKernelConfig;
+
+    })
+
+  ];
 
-        # The config options that all modules can depend upon
-        system.requiredKernelConfig = with config.lib.kernelConfig;
-          [
-            # !!! Should this really be needed?
-            (isYes "MODULES")
-            (isYes "BINFMT_ELF")
-          ]
-          ++ (optional (randstructSeed != "") (isYes "GCC_PLUGIN_RANDSTRUCT"));
-
-        # nixpkgs kernels are assumed to have all required features
-        assertions =
-          if config.boot.kernelPackages.kernel ? features
-          then []
-          else let
-            cfg = config.boot.kernelPackages.kernel.config;
-          in
-            map (
-              attrs: {
-                assertion = attrs.assertion cfg;
-                inherit (attrs) message;
-              }
-            )
-            config.system.requiredKernelConfig;
-      })
-    ];
 }
