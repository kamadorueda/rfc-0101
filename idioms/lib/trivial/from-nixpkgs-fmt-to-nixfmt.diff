diff --git a/idioms/lib/trivial/after-nixpkgs-fmt.nix b/idioms/lib/trivial/after-nixfmt.nix
index 8949964..50127d5 100644
--- a/idioms/lib/trivial/after-nixpkgs-fmt.nix
+++ b/idioms/lib/trivial/after-nixfmt.nix
@@ -13,3 +13,4 @@ rec {
     # The value to return
-    x: x;
+    x:
+    x;
 
@@ -29,3 +30,4 @@ rec {
     # Value to ignore
-    y: x;
+    y:
+    x;
 
@@ -81,24 +83,21 @@ rec {
 
-  /* boolean ‚Äúor‚Äù */
+  # boolean ‚Äúor‚Äù
   or = x: y: x || y;
 
-  /* boolean ‚Äúand‚Äù */
+  # boolean ‚Äúand‚Äù
   and = x: y: x && y;
 
-  /* bitwise ‚Äúand‚Äù */
-  bitAnd = builtins.bitAnd
-    or (import ./zip-int-bits.nix
+  # bitwise ‚Äúand‚Äù
+  bitAnd = builtins.bitAnd or (import ./zip-int-bits.nix
     (a: b: if a == 1 && b == 1 then 1 else 0));
 
-  /* bitwise ‚Äúor‚Äù */
-  bitOr = builtins.bitOr
-    or (import ./zip-int-bits.nix
+  # bitwise ‚Äúor‚Äù
+  bitOr = builtins.bitOr or (import ./zip-int-bits.nix
     (a: b: if a == 1 || b == 1 then 1 else 0));
 
-  /* bitwise ‚Äúxor‚Äù */
-  bitXor = builtins.bitXor
-    or (import ./zip-int-bits.nix
+  # bitwise ‚Äúxor‚Äù
+  bitXor = builtins.bitXor or (import ./zip-int-bits.nix
     (a: b: if a != b then 1 else 0));
 
-  /* bitwise ‚Äúnot‚Äù */
+  # bitwise ‚Äúnot‚Äù
   bitNot = builtins.sub (-1);
@@ -127,3 +126,4 @@ rec {
     # Right attribute set (higher precedence for equal keys)
-    y: x // y;
+    y:
+    x // y;
 
@@ -151,3 +151,4 @@ rec {
     # Argument to check for null before passing it to `f`
-    a: if a == null then a else f a;
+    a:
+    if a == null then a else f a;
 
@@ -155,6 +156,4 @@ rec {
   inherit (builtins)
-    pathExists readFile isBool
-    isInt isFloat add sub lessThan
-    seq deepSeq genericClosure;
-
+    pathExists readFile isBool isInt isFloat add sub lessThan seq deepSeq
+    genericClosure;
 
@@ -162,6 +161,6 @@ rec {
 
-  /* Returns the current full nixpkgs version number. */
+  # Returns the current full nixpkgs version number.
   version = release + versionSuffix;
 
-  /* Returns the current nixpkgs release number as string. */
+  # Returns the current nixpkgs release number as string.
   release = lib.strings.fileContents ../.version;
@@ -175,8 +174,8 @@ rec {
 
-  /* Returns the current nixpkgs version suffix as string. */
-  versionSuffix =
-    let suffixFile = ../.version-suffix;
-    in if pathExists suffixFile
-    then lib.strings.fileContents suffixFile
-    else "pre-git";
+  # Returns the current nixpkgs version suffix as string.
+  versionSuffix = let suffixFile = ../.version-suffix;
+  in if pathExists suffixFile then
+    lib.strings.fileContents suffixFile
+  else
+    "pre-git";
 
@@ -193,9 +192,11 @@ rec {
       gitRepo = "${toString ./..}/.git";
-    in
-    if lib.pathIsGitRepo gitRepo
-    then lib.commitIdFromGitRepo gitRepo
-    else if lib.pathExists revisionFile then lib.fileContents revisionFile
-    else default;
+    in if lib.pathIsGitRepo gitRepo then
+      lib.commitIdFromGitRepo gitRepo
+    else if lib.pathExists revisionFile then
+      lib.fileContents revisionFile
+    else
+      default;
 
-  nixpkgsVersion = builtins.trace "`lib.nixpkgsVersion` is deprecated, use `lib.version` instead!" version;
+  nixpkgsVersion = builtins.trace
+    "`lib.nixpkgsVersion` is deprecated, use `lib.version` instead!" version;
 
@@ -211,6 +211,6 @@ rec {
 
-  /* Return minimum of two numbers. */
+  # Return minimum of two numbers.
   min = x: y: if x < y then x else y;
 
-  /* Return maximum of two numbers. */
+  # Return maximum of two numbers.
   max = x: y: if x > y then x else y;
@@ -236,8 +235,3 @@ rec {
   */
-  compare = a: b:
-    if a < b
-    then -1
-    else if a > b
-    then 1
-    else 0;
+  compare = a: b: if a < b then -1 else if a > b then 1 else 0;
 
@@ -272,6 +266,3 @@ rec {
     b:
-    if p a
-    then if p b then yes a b else -1
-    else if p b then 1 else no a b;
-
+    if p a then if p b then yes a b else -1 else if p b then 1 else no a b;
 
@@ -281,4 +272,3 @@ rec {
   */
-  importJSON = path:
-    builtins.fromJSON (builtins.readFile path);
+  importJSON = path: builtins.fromJSON (builtins.readFile path);
 
@@ -288,4 +278,3 @@ rec {
   */
-  importTOML = path:
-    builtins.fromTOML (builtins.readFile path);
+  importTOML = path: builtins.fromTOML (builtins.readFile path);
 
@@ -306,21 +295,22 @@ rec {
 
-  /*
-    Print a warning before returning the second argument. This function behaves
-    like `builtins.trace`, but requires a string message and formats it as a
-    warning, including the `warning: ` prefix.
+  /* Print a warning before returning the second argument. This function behaves
+     like `builtins.trace`, but requires a string message and formats it as a
+     warning, including the `warning: ` prefix.
 
-    To get a call stack trace and abort evaluation, set the environment variable
-    `NIX_ABORT_ON_WARN=true` and set the Nix options `--option pure-eval false --show-trace`
+     To get a call stack trace and abort evaluation, set the environment variable
+     `NIX_ABORT_ON_WARN=true` and set the Nix options `--option pure-eval false --show-trace`
 
-    Type: string -> a -> a
+     Type: string -> a -> a
   */
   warn =
-    if lib.elem (builtins.getEnv "NIX_ABORT_ON_WARN") [ "1" "true" "yes" ]
-    then msg: builtins.trace "[1;31mwarning: ${msg}[0m" (abort "NIX_ABORT_ON_WARN=true; warnings are treated as unrecoverable errors.")
-    else msg: builtins.trace "[1;31mwarning: ${msg}[0m";
+    if lib.elem (builtins.getEnv "NIX_ABORT_ON_WARN") [ "1" "true" "yes" ] then
+      msg:
+      builtins.trace "[1;31mwarning: ${msg}[0m" (abort
+        "NIX_ABORT_ON_WARN=true; warnings are treated as unrecoverable errors.")
+    else
+      msg: builtins.trace "[1;31mwarning: ${msg}[0m";
 
-  /*
-    Like warn, but only warn when the first argument is `true`.
+  /* Like warn, but only warn when the first argument is `true`.
 
-    Type: bool -> string -> a -> a
+     Type: bool -> string -> a -> a
   */
@@ -328,21 +318,19 @@ rec {
 
-  /*
-    Like the `assert b; e` expression, but with a custom error message and
-    without the semicolon.
-
-    If true, return the identity function, `r: r`.
+  /* Like the `assert b; e` expression, but with a custom error message and
+     without the semicolon.
 
-    If false, throw the error message.
+     If true, return the identity function, `r: r`.
 
-    Calls can be juxtaposed using function application, as `(r: r) a = a`, so
-    `(r: r) (r: r) a = a`, and so forth.
+     If false, throw the error message.
 
-    Type: bool -> string -> a -> a
+     Calls can be juxtaposed using function application, as `(r: r) a = a`, so
+     `(r: r) (r: r) a = a`, and so forth.
 
-    Example:
+     Type: bool -> string -> a -> a
 
-        throwIfNot (lib.isList overlays) "The overlays argument to nixpkgs must be a list."
-        lib.foldr (x: throwIfNot (lib.isFunction x) "All overlays passed to nixpkgs must be functions.") (r: r) overlays
-        pkgs
+     Example:
 
+         throwIfNot (lib.isList overlays) "The overlays argument to nixpkgs must be a list."
+         lib.foldr (x: throwIfNot (lib.isFunction x) "All overlays passed to nixpkgs must be functions.") (r: r) overlays
+         pkgs
   */
@@ -361,7 +349,8 @@ rec {
   checkListOfEnum = msg: valid: given:
-    let
-      unexpected = lib.subtractLists valid given;
-    in
-    lib.throwIfNot (unexpected == [ ])
-      "${msg}: ${builtins.concatStringsSep ", " (builtins.map builtins.toString unexpected)} unexpected; valid ones: ${builtins.concatStringsSep ", " (builtins.map builtins.toString valid)}";
+    let unexpected = lib.subtractLists valid given;
+    in lib.throwIfNot (unexpected == [ ]) "${msg}: ${
+      builtins.concatStringsSep ", " (builtins.map builtins.toString unexpected)
+    } unexpected; valid ones: ${
+      builtins.concatStringsSep ", " (builtins.map builtins.toString valid)
+    }";
 
@@ -383,5 +372,4 @@ rec {
   */
-  setFunctionArgs = f: args:
-    {
-      # TODO: Should we add call-time "type" checking like built in?
+  setFunctionArgs =
+    f: args: { # TODO: Should we add call-time "type" checking like built in?
       __functor = self: f;
@@ -397,5 +385,6 @@ rec {
   functionArgs = f:
-    if f ? __functor
-    then f.__functionArgs or (lib.functionArgs (f.__functor f))
-    else builtins.functionArgs f;
+    if f ? __functor then
+      f.__functionArgs or (lib.functionArgs (f.__functor f))
+    else
+      builtins.functionArgs f;
 
@@ -404,4 +393,4 @@ rec {
   */
-  isFunction = f: builtins.isFunction f ||
-    (f ? __functor && isFunction (f.__functor f));
+  isFunction = f:
+    builtins.isFunction f || (f ? __functor && isFunction (f.__functor f));
 
@@ -419,4 +408,4 @@ rec {
       toHexDigit = d:
-        if d < 10
-        then toString d
+        if d < 10 then
+          toString d
         else
@@ -430,4 +419,3 @@ rec {
           }.${toString d};
-    in
-    lib.concatMapStrings toHexDigit (toBaseDigits 16 i);
+    in lib.concatMapStrings toHexDigit (toBaseDigits 16 i);
 
@@ -445,4 +433,4 @@ rec {
       go = i:
-        if i < base
-        then [ i ]
+        if i < base then
+          [ i ]
         else
@@ -451,8 +439,4 @@ rec {
             q = (i - r) / base;
-          in
-          [ r ] ++ go q;
-    in
-    assert (base >= 2);
-    assert (i >= 0);
-    lib.reverseList (go i);
+          in [ r ] ++ go q;
+    in assert (base >= 2); assert (i >= 0); lib.reverseList (go i);
 }
